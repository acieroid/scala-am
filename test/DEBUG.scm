(define (tree-copy x)
  (if (not (pair? x))
    x
    (cons (tree-copy (car x))
      (tree-copy (cdr x)))))
(define (init n m ipats)
  (let ((ipats (tree-copy ipats)))
    (do ((n n (- n 1))
          (i m (if (zero? i) m (- i 1)))
          (a '()))
      ((= n 0) a)
      (set! a (cons 's a)))))
(init 1 1 '(( a (b b)) (a (b a) b a)))